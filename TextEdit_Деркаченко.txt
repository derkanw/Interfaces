***Архитектура TextEdit:

Работа с текстом производится через класс TextEdit, который является наследником класса QMainWindow. Это позволяет работать как с отображением текста, так и с параметрами окна отображения.

Класс TextEdit хранит указатель на объект класса QTextEdit, являясь для последнего интерфейсной оболочкой. В свою очередь структура QTextEdit является примером идеомы pimpl, так как хранит QTextEdit в себе пару QTextEdit и QTextEditPrivate.
В параметры конструктора класса TextEdit принимается указатель на родительское окно, по умолчанию определенный как нулевой указатель.

Извлечение файла происходит в методе TextEdit::load(). В данном методе определяется, является ли текст размеченным или обычным. По типу текста определяется способ его обработки. Класс QTextControl, наследуемый от QTextEditPrivate, осуществляет управление текстом с помощью хранения выгруженного текста в классе QTextDocument и его изменения в классе QTextCursor.

Текст имеет логическую структуру: делится на параграфы и символы, содержащиеся в них. Каждый символ параграфа имеет дополнительные параметры: шрифт, цвет и др. В классе QTextDocument текст хранится в виде QString и имеет две структуры для хранения смещений параграфов и смещений внутри каждого параграфа.

Также могут хранится изображения в виде ссылок на внешние ресурсы, списки, обрабатывающиеся классом QTextList, таблицы, обрабатывающиеся классом QTextTable.

При каждом изменении текста посылается QTextEdit сигнал с соответствующим изменением. Это позволяет эффективно отображать изменения текста в окне.

***Вопросы из лекций:

1. При отсутствии создания объекта QApplication и вызова QApplication::exec() компиляция успешна, но появляется RE о том, что перед созданием виджета (QWidget::QMainWindow::TextEdit) необходимо создание объекта QApplication.

2. Реализована следующая последовательность классов: QCoreApplication::QGuiApplication::QApplication, каждый из которых управляет обработкой сообщений соответствующего типа: соответственно сообщения приложений без GUI, с GUI и приложения с виджетами. В случае приложения с виджетами при поступлении сообщения объект QApplication вынимает его и отправляет соответствующему виджету на обработку.

3. Так как добиться внедрения унифицированной системы сообщений для существующих ОС сложнее, нежели создать продукт, работающих с уже закрепившимися вариантами систем сообщений. При этом разработчкам ОС пришлось бы не только изменять систему текущей платформы, но и обеспечивать совместимость с системами предыдущих версий.

4. Создание базового класса получателя сообщения и список ннаследников - конкретных получателей позволяет ограничить множество необходимых получателей и декларирует, что зарегистрированы те получатели, которые в состоянии обработать соответствующее сообщение.

5. Подписка на сообщения в ран-тайме позволяет динамически добавляться и отписываться в списке получателей сообщения. Например, в результате некоторых действий пользователя может происходить подписка/отписка получателей, что заранее не возможно предусмотреть на этапе компиляции.